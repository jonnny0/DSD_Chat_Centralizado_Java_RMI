
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;

public class VentanaCliente extends javax.swing.JFrame {

    private final InterfaceCliente cliente;
    private final InterfaceServidor servidor;
    private String nombreCliente;

    public VentanaCliente(String nombreCliente, InterfaceCliente cliente, InterfaceServidor servidor) {
        initComponents();        
        this.cliente = cliente;
        this.servidor = servidor;
        this.nombreCliente = nombreCliente;

        this.setTitle("Cliente: " + nombreCliente);

        //listener para cuando se cierra la ventana
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    salir();
                } catch (RemoteException ex) {
                    Logger.getLogger(VentanaCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        //para poder mandar con el intro 
        mandarMensaje.addActionListener(intro);

        //para que al iniciar el foco lo tenga el envío de mensajes
        mandarMensaje.requestFocus();

        //para hacer autoscroll
        DefaultCaret caret = (DefaultCaret) listaMensajes.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

    }

    /**
     * Desconecta el cliente del servidor y muestra mensaje de salida
     * @throws RemoteException 
     */
    public void salir() throws RemoteException {
        try {
            servidor.desconectar(cliente, nombreCliente);
        } catch (RemoteException e) {
            System.err.println("VENTANACLIENTE exception:" + e.toString());
        }
        JOptionPane.showMessageDialog(null, "¡Hasta pronto " + nombreCliente + "!");
        System.exit(0);
    }

    /**
     * Actualiza la lista de clientes conectados
     * @throws RemoteException 
     */
    public void actualizarClientes() throws RemoteException {
        usuariosConectados.setText("");
        for (String str : servidor.getClientes()) {
            usuariosConectados.append(str);
            usuariosConectados.append("\n");
        }
    }

    /**
     * Actualiza la lista de mensajes
     * @param mensaje 
     */
    public void actualizarMensajes(String mensaje) {
        listaMensajes.append(mensaje + "\n");
    }

    /**
     * Manda un mensaje al servidor para que lo difunda a todos los clientes
     * @param mensaje El mensaje a difundir
     * @throws RemoteException 
     */
    private void mandarMensaje(String mensaje) throws RemoteException {
        try {
            servidor.difundirMensaje(mensaje);
            mandarMensaje.setText("");
            mandarMensaje.requestFocus();
        } catch (RemoteException ex) {
            Logger.getLogger(VentanaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Al pulsar intro se manda el mensaje
     */
    Action intro = new AbstractAction() {
        public void actionPerformed(ActionEvent e) {
            if (!mandarMensaje.getText().equals("")) {
                try {
                    mandarMensaje(nombreCliente + ": " + mandarMensaje.getText());
                } catch (RemoteException ex) {
                    Logger.getLogger(VentanaCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiquetaUsuariosConectados = new javax.swing.JLabel();
        etiquetaListaMensajes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaMensajes = new javax.swing.JTextArea();
        etiquetaEscribirMensaje = new javax.swing.JLabel();
        mandarMensaje = new javax.swing.JTextField();
        botonDesconectar = new javax.swing.JButton();
        botonMandarMensaje = new javax.swing.JButton();
        usuariosConectados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        etiquetaUsuariosConectados.setText("Usuarios Conectados:");

        etiquetaListaMensajes.setText("Lista de mensajes:");

        listaMensajes.setEditable(false);
        listaMensajes.setColumns(20);
        listaMensajes.setRows(5);
        listaMensajes.setFocusable(false);
        jScrollPane1.setViewportView(listaMensajes);

        etiquetaEscribirMensaje.setText("Mensaje:");

        botonDesconectar.setText("Desconectar");
        botonDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDesconectarActionPerformed(evt);
            }
        });

        botonMandarMensaje.setText("Enviar");
        botonMandarMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMandarMensajeActionPerformed(evt);
            }
        });

        usuariosConectados.setEditable(false);
        usuariosConectados.setColumns(20);
        usuariosConectados.setRows(5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(etiquetaEscribirMensaje)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mandarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonMandarMensaje))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(etiquetaListaMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(usuariosConectados, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(etiquetaUsuariosConectados)
                                .addGap(0, 2, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(botonDesconectar)
                                .addGap(22, 22, 22)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonDesconectar)
                        .addGap(18, 18, 18)
                        .addComponent(etiquetaUsuariosConectados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usuariosConectados, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(etiquetaListaMensajes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaEscribirMensaje)
                    .addComponent(mandarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonMandarMensaje))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDesconectarActionPerformed
        try {
            salir();
        } catch (RemoteException ex) {
            Logger.getLogger(VentanaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonDesconectarActionPerformed

    private void botonMandarMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMandarMensajeActionPerformed
        if (!mandarMensaje.getText().equals("")) {
            try {
                mandarMensaje(nombreCliente + ": " + mandarMensaje.getText());
            } catch (RemoteException ex) {
                Logger.getLogger(VentanaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_botonMandarMensajeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonDesconectar;
    private javax.swing.JButton botonMandarMensaje;
    private javax.swing.JLabel etiquetaEscribirMensaje;
    private javax.swing.JLabel etiquetaListaMensajes;
    private javax.swing.JLabel etiquetaUsuariosConectados;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea listaMensajes;
    private javax.swing.JTextField mandarMensaje;
    private javax.swing.JTextArea usuariosConectados;
    // End of variables declaration//GEN-END:variables
}
